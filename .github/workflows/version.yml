name: Version

on:
  workflow_run:
    workflows:
      - CI
    types:
      - completed

jobs:

  version:

    runs-on: ubuntu-latest

    if: >
      ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == null && github.event.workflow_run.event == 'push' && github.ref_name == 'main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full history to allow diff detection

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Determine changed modules
        id: determine-changes
        run: |
          chmod +x ./scripts/detect-changes.sh
          ./scripts/detect-changes.sh > changed-modules.txt
          echo "CHANGED_MODULES=$(cat changed-modules.txt)" >> $GITHUB_ENV

      - name: Set module versions (release)
        if: env.CHANGED_MODULES != ''
        run: |
          chmod +x ./scripts/update-versions.sh
          ./scripts/update-versions.sh "release" "$CHANGED_MODULES"

      - name: Build and Test
        run: mvn -PversionRelease

      - name: Commit and push release versions
        if: env.CHANGED_MODULES != ''
        run: |
          git config user.name "Auto Version"
          git config user.email "autoversion@smauel.com"
          git add .
          git commit -m "ci: Version modules [$CHANGED_MODULES]"
          git push

      - name: Tag affected modules
        if: env.CHANGED_MODULES != ''
        run: |
          for module in $CHANGED_MODULES; do
            # Extract the new version for the module
            VERSION_PROPERTY="${module}.auto.version"
            NEW_VERSION=$(grep "<$VERSION_PROPERTY>" pom.xml | sed -E "s/^.*<$VERSION_PROPERTY>(.*)<\/$VERSION_PROPERTY>.*$/\1/")
            TAG_NAME="${module}v${NEW_VERSION}"
            echo "Creating tag $TAG_NAME"
            git tag -f "$TAG_NAME"
          done
          git push --tags


      - name: Set target module versions (increment and snapshot)
        if: env.CHANGED_MODULES != ''
        run: |
          chmod +x ./scripts/update-versions.sh
          ./scripts/update-versions.sh "snapshot" "$CHANGED_MODULES"

      - name: Update module versions
        run: mvn -PversionNext

      - name: Commit and push snapshot versions
        if: env.CHANGED_MODULES != ''
        run: |
          git config user.name "Auto Version"
          git config user.email "autoversion@smauel.com"
          git add .
          git commit -m "ci: Prepare next development cycle for $CHANGED_MODULES"
          git push