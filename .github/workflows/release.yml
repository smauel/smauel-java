name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven
      - run: mvn -B dependency:go-offline

  detect-changes:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      changed_modules: ${{ steps.changes.outputs.changed_modules }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-java-maven
      - name: Detect changed modules
        id: changes
        run: |
          CHANGED_MODULES=$(./scripts/detect-changes.sh)
          echo "changed_modules<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_MODULES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  lint:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven
      - run: mvn -B spotless:check

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven
      - run: mvn -B verify

  release-versioning:
    needs:
      - detect-changes
      - build-and-test
    if: needs.detect-changes.outputs.changed_modules != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: auto-version-token
        with:
          app-id: ${{ vars.AUTO_VERSION_APP_ID }}
          private-key: ${{ secrets.AUTO_VERSION_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.auto-version-token.outputs.token }}
      - uses: ./.github/actions/setup-java-maven
      - run: ./scripts/update-versions.sh "release" "${{ needs.detect-changes.outputs.changed_modules }}"
      - run: mvn -B clean verify -PversionRelease
      - run: |
          git config user.name "Auto Version"
          git config user.email "autoversion@smauel.com"
          git add .
          git commit -m "ci: Version modules [${{ needs.detect-changes.outputs.changed_modules }}]" -m "[no ci]"
          git push

  publish:
    needs: release-versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - uses: ./.github/actions/setup-java-maven
      - run: mvn -B clean deploy -Ppublish

  tag-modules:
    needs:
      - detect-changes
      - release-versioning
    if: needs.detect-changes.outputs.changed_modules != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: auto-version-token
        with:
          app-id: ${{ vars.AUTO_VERSION_APP_ID }}
          private-key: ${{ secrets.AUTO_VERSION_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.auto-version-token.outputs.token }}
      - uses: ./.github/actions/setup-java-maven
      - run: |
          while IFS= read -r module; do
            # Trim leading and trailing whitespace
            module="${module#"${module%%[![:space:]]*}"}"
            module="${module%"${module##*[![:space:]]}"}"

            # Skip empty lines
            [ -z "$module" ] && continue

            VERSION_PROPERTY="${module}.auto.version"
            NEW_VERSION=$(grep "<$VERSION_PROPERTY>" pom.xml | sed -E "s/^.*<$VERSION_PROPERTY>(.*)<\/$VERSION_PROPERTY>.*$/\1/")
            TAG_NAME="${module}v${NEW_VERSION}"

            echo "Creating tag $TAG_NAME"
            git tag -f "$TAG_NAME"
          done <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          git push --tags

  prepare-next-version:
    needs:
      - detect-changes
      - tag-modules
    if: needs.detect-changes.outputs.changed_modules != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: auto-version-token
        with:
          app-id: ${{ vars.AUTO_VERSION_APP_ID }}
          private-key: ${{ secrets.AUTO_VERSION_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.auto-version-token.outputs.token }}
      - uses: ./.github/actions/setup-java-maven
      - run: ./scripts/update-versions.sh "snapshot" "${{ needs.detect-changes.outputs.changed_modules }}"
      - run: mvn -B clean verify -PversionNext
      - run: |
          git config user.name "Auto Version"
          git config user.email "autoversion@smauel.com"
          git add .
          git commit -m "ci: Prepare next development cycle for ${{ needs.detect-changes.outputs.changed_modules }}" -m "[no ci]"
          git push