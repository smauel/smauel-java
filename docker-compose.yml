#version: '3.8'
#
services:
  users-api:
    build:
      context: ./backend/users-api/
      dockerfile: src/main/docker/Dockerfile
      args:
        JAR_FILE: users-api-boot.jar
    environment:
      SPRING_PROFILES_ACTIVE: local
      DATASOURCE_URL: jdbc:postgresql://db:5432/usersdb
      DATASOURCE_USERNAME: user
      DATASOURCE_PASSWORD: password
    depends_on:
      - db
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 3s

  permissions-api:
    build:
      context: ./backend/permissions-api/
      dockerfile: src/main/docker/Dockerfile
      args:
        JAR_FILE: permissions-api-boot.jar
    environment:
      SPRING_PROFILES_ACTIVE: local
      DATASOURCE_URL: jdbc:postgresql://db:5432/permissionsdb
      DATASOURCE_USERNAME: user
      DATASOURCE_PASSWORD: password
    depends_on:
      - db
    ports:
      - "8081:8080"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 3s

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"  # Optional: expose for external DB tools
    volumes:
      - ./scripts/init-docker-dbs.sh:/docker-entrypoint-initdb.d/init-docker-dbs.sh
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  integration-tests:
    build:
      context: ./collections
      dockerfile: src/main/docker/Dockerfile
    environment:
      COLLECTION: integration-tests
      ENV: dev
    depends_on:
      users-api:
        condition: service_healthy
    volumes:
      - ./collections/results:/app/tests/results
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
